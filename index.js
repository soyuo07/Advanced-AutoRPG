function enterBossBattle() {
    if (inBossDungeon) {
        exitBossDungeon();
        return;
    }
    if (userData.hp <= 0) {
        alert("Ï≤¥Î†•Ïù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§.");
        return;
    }
    inBossDungeon = true;
    document.getElementById(
            "fightBossBtn").innerText =
        "Î≥¥Ïä§ Ï†ÑÌà¨ Ï§ëÏßÄ";
    log("‚öîÔ∏è Î≥¥Ïä§ÏôÄÏùò Ï†ÑÌà¨Í∞Ä ÏãúÏûëÎê©ÎãàÎã§!");
    // Î≥¥Ïä§ Ïä§ÌÉØ Í≥ÑÏÇ∞ (Ïä§ÌÖåÏù¥ÏßÄ Í∏∞Î∞ò)
    let bossStage =
    currentBossStage; // Î≥¥Ïä§ Ïä§ÌÖåÏù¥ÏßÄÎèÑ currentStage Í∏∞Ï§Ä ÏÇ¨Ïö©
    let bossHp = Math.floor((bossStage /
        5 + 2) * bossStage * 10);
    let bossCrit = bossStage * 2;
    let bossHit = bossStage * 10;
    let bossDef = (bossStage / 15 +
        1.2) * bossStage;
    let bossAtk = Math.floor((
            bossStage / 3 + 2) *
        bossStage);
    let bossReward = bossStage * 2;
    const evasionRatePlayer = userData
        .totalDex / (userData.totalDex +
            bossHit);
    const bossEvasion = bossStage * 1.5;
    const evasionRateBoss =
        bossEvasion / (bossEvasion +
            userData.totalDex * 5 +
            userData.totalStr * 5 + 1);
    bossdungeonInterval = setInterval(
        async () => {
            if (
                isProcessingBossTick)
                return; // Ïù¥ÎØ∏ Ï≤òÎ¶¨ Ï§ëÏù¥Î©¥ skip
            isProcessingBossTick
                = true;
            try {
                if (Math
                    .random() <
                    evasionRatePlayer
                    ) {
                    log(
                    "ÌîåÎ†àÏù¥Ïñ¥Í∞Ä Î≥¥Ïä§ Í≥µÍ≤©ÏùÑ ÌöåÌîºÌñàÏäµÎãàÎã§.");
                } else {
                    let isCrit =
                        Math
                        .random() *
                        100 <
                        bossCrit;
                    let playerDef =
                        userData
                        .totalCon;
                    let dmgReduction =
                        1 - (
                            playerDef /
                            (userData
                                .level *
                                2 +
                                playerDef
                                )
                            );
                    let dmg =
                        bossAtk;
                    if (
                        isCrit) {
                        dmg =
                            Math
                            .floor(
                                bossAtk *
                                (bossCrit /
                                    2000 +
                                    1.1
                                    )
                                );
                        dmg =
                            Math
                            .floor(
                                dmg *
                                dmgReduction
                                );
                        dmg =
                            applyRandomVariance(
                                dmg
                                );
                        dmg =
                            Math
                            .max(
                                1,
                                dmg
                                );
                        userData
                            .hp -=
                            dmg;
                        log(
                        `üí• Î≥¥Ïä§Ïùò ÏπòÎ™ÖÌÉÄ! ÌîåÎ†àÏù¥Ïñ¥Í∞Ä ${dmg} ÌîºÌï¥Î•º Î∞õÏïòÏäµÎãàÎã§.`);
                    } else {
                        dmg =
                            Math
                            .floor(
                                dmg *
                                dmgReduction
                                );
                        dmg =
                            applyRandomVariance(
                                dmg
                                );
                        dmg =
                            Math
                            .max(
                                1,
                                dmg
                                );
                        userData
                            .hp -=
                            dmg;
                        log(
                        `ÌîåÎ†àÏù¥Ïñ¥Í∞Ä ${dmg} ÌîºÌï¥Î•º Î∞õÏïòÏäµÎãàÎã§.`);
                    }
                }
                if (Math
                    .random() <
                    evasionRateBoss
                    ) {
                    log(
                    "Î≥¥Ïä§Í∞Ä ÌîåÎ†àÏù¥Ïñ¥ Í≥µÍ≤©ÏùÑ ÌöåÌîºÌñàÏäµÎãàÎã§.");
                } else {
                    const
                        playerAtk =
                        1 + ((userData
                                .level /
                                2
                                ) +
                            1) *
                        userData
                        .totalStr *
                        1.5;
                    const
                        critStat =
                        userData
                        .totalDex *
                        5;
                    const
                        critChance =
                        critStat /
                        (critStat +
                            150
                            );
                    let isCrit =
                        Math
                        .random() <
                        critChance;
                    let dmgReductionPlayer =
                        1 - (
                            bossDef /
                            (userData
                                .level *
                                2 +
                                bossDef
                                )
                            );
                    let dmg;
                    if (
                        isCrit) {
                        const
                            critDamage =
                            playerAtk *
                            (critStat /
                                2000 +
                                1.1
                                );
                        dmg =
                            Math
                            .floor(
                                critDamage *
                                dmgReductionPlayer
                                );
                        dmg =
                            applyRandomVariance(
                                dmg
                                );
                        dmg =
                            Math
                            .max(
                                1,
                                dmg
                                );
                        bossHp
                            -=
                            dmg;
                        log(
                        `üéØ ÏπòÎ™ÖÌÉÄ! Î≥¥Ïä§Í∞Ä ${dmg} ÌîºÌï¥Î•º ÏûÖÏóàÏäµÎãàÎã§.`);
                    } else {
                        dmg =
                            Math
                            .floor(
                                playerAtk *
                                dmgReductionPlayer
                                );
                        dmg =
                            applyRandomVariance(
                                dmg
                                );
                        dmg =
                            Math
                            .max(
                                1,
                                dmg
                                );
                        bossHp
                            -=
                            dmg;
                        log(
                        `Î≥¥Ïä§Í∞Ä ${dmg} ÌîºÌï¥Î•º ÏûÖÏóàÏäµÎãàÎã§.`);
                    }
                }
                log(
                `üßü&zwj;‚ôÇÔ∏è Î≥¥Ïä§ ÎÇ®ÏùÄ Ï≤¥Î†•: ${Math.max(0, bossHp)}`);
                // Î≥¥Ïä§ Ï≤òÏπò
                if (bossHp <=
                    0) {
                    userData
                        .gold +=
                        bossReward *
                        50;
                    userData
                        .exp +=
                        bossReward *
                        30;
                    log(
                    `üèÜ Î≥¥Ïä§Î•º Ï≤òÏπòÌñàÏäµÎãàÎã§! Í≥®Îìú +${bossReward * 50}, Í≤ΩÌóòÏπò +${bossReward * 30}`);
                    // ÏÑúÎ≤ÑÏóê Î≥¥Ïä§ Ï≤òÏπò ÏÇ¨Ïã§ ÏïåÎ¶¨Í≥† ÏïÑÏù¥ÌÖú ÎìúÎûç Ï≤òÎ¶¨ ÏöîÏ≤≠
                    bossdungeonInterval
                        &&
                        clearInterval(
                            bossdungeonInterval
                            );
                    inBossDungeon
                        = false;
                    try {
                        const
                            firebaseToken =
                            await firebase
                            .auth()
                            .currentUser
                            .getIdToken();
                        const
                            result =
                            await reportBossDefeat(
                                bossStage,
                                firebaseToken
                                );
                        if (result
                            .success &&
                            result
                            .droppedItem
                            ) {
                            userData
                                .inventory
                                .push(
                                    result
                                    .droppedItem
                                    );
                            log(
                            `üéÅ Î≥¥Ïä§ Ï†ÑÎ¶¨Ìíà ÌöçÎìù: ${result.droppedItem.item_name}`);
                            document
                                .getElementById(
                                    'bossFightResult'
                                    )
                                .innerHTML =
                                `üéÅ Î≥¥Ïä§ Ï†ÑÎ¶¨Ìíà ÌöçÎìù: ${result.droppedItem.item_name}`
                        } else {
                            log(
                            `‚ö†Ô∏è Î≥¥Ïä§ Ï†ÑÎ¶¨Ìíà ÌöçÎìù Ïã§Ìå®: ${result.message || 'ÏïÑÏù¥ÌÖúÏù¥ ÎìúÎûçÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'}`);
                            document
                                .getElementById(
                                    'bossFightResult'
                                    )
                                .innerHTML =
                                "‚ö†Ô∏è Î≥¥Ïä§ Ï†ÑÎ¶¨Ìíà ÌöçÎìù Ïã§Ìå®";
                        }
                        saveData
                            ();
                        updateUI
                            ();
                    } catch (
                        error) {
                        console
                            .error(
                                error
                                );
                        document
                            .getElementById(
                                'bossFightResult'
                                )
                            .innerHTML =
                            'ÏÑúÎ≤Ñ ÌÜµÏã† Ïã§Ìå®';
                    }
                    enterBossBattle
                        (); // ÏûêÎèôÏ†ÑÌà¨ Ï§ëÏßÄ
                    checkLevelUp
                        ();
                }
                populateEnhanceList
                    (userData
                        .inventory
                        );
                autoUsePotion();
                updateUI();
                saveData();
                // ÌîåÎ†àÏù¥Ïñ¥ ÏÇ¨Îßù
                if (userData
                    .hp <= 0) {
                    stopBossBattle
                        ();
                    log(
                    "üíÄ Î≥¥Ïä§ÏóêÍ≤å Ìå®Î∞∞ÌñàÏäµÎãàÎã§. Ï≤¥Î†•Ïù¥ 100%ÌöåÎ≥µÎêòÍ≥† Î≥¥Ïú† Í≤ΩÌóòÏπòÏùò 30%Î•º ÏûÉÏäµÎãàÎã§.");
                    userData
                        .exp =
                        Math
                        .floor(
                            userData
                            .exp *
                            0.7
                            );
                    userData
                        .hp =
                        userData
                        .maxHp;
                    updateUI();
                    saveData();
                    showTab(
                        "home");
                    alert(
                        "Î≥¥Ïä§ÏóêÍ≤å Ìå®Î∞∞ÌñàÏäµÎãàÎã§. Ï≤¥Î†•Ïù¥ 100%ÌöåÎ≥µÎêòÍ≥† Î≥¥Ïú† Í≤ΩÌóòÏπòÏùò 30%Î•º ÏûÉÏäµÎãàÎã§.");
                }
            } catch (error) {
                console.error(
                    error);
            } finally {
                isProcessingBossTick
                    = false;
            }
        }, 1);
}

function populateEnhanceList(inventory) {
    const select = document.getElementById("itemSelect");
    const prevSelectedId = select.value;
    const prevSelectedIndex = select.selectedIndex;

    select.innerHTML = "";

    const options = [];

    inventory.forEach(item => {
        if (item.equipped) return; // Ïû•Ï∞©Îêú ÏïÑÏù¥ÌÖúÏùÄ Ï†úÏô∏

        const enhLevel = item.enhancement_level || 0;
        const baseName = item.item_name.replace(/(\d+Í∞ï\s*)?/, "");
        const displayName = enhLevel > 0 ? `${enhLevel}Í∞ï ${baseName}` : baseName;

        const option = document.createElement("option");
        option.value = item.id;
        option.textContent = displayName;
        options.push(option);
        select.appendChild(option);
    });

    // Ïö∞ÏÑ†ÏàúÏúÑ 1: Í∏∞Ï°¥ ÏÑ†ÌÉùÎêú IDÍ∞Ä Ïó¨Ï†ÑÌûà ÏûàÎã§Î©¥ Í∑∏Í≤ÉÏùÑ ÏÑ†ÌÉù
    if (options.some(opt => opt.value === prevSelectedId)) {
        select.value = prevSelectedId;
    }
    // Ïö∞ÏÑ†ÏàúÏúÑ 2: Í∏∞Ï°¥ ÏÑ†ÌÉù Ïù∏Îç±Ïä§Í∞Ä Ïú†Ìö®ÌïòÎ©¥ Ìï¥Îãπ Ïù∏Îç±Ïä§ ÏÑ†ÌÉù
    else if (prevSelectedIndex >= 0 && prevSelectedIndex < options.length) {
        select.selectedIndex = prevSelectedIndex;
    }
    // Ïö∞ÏÑ†ÏàúÏúÑ 3: Í∑∏ Ïô∏ÏóêÎäî Ï≤´ Î≤àÏß∏ Ìï≠Î™© ÏÑ†ÌÉù
    else if (options.length > 0) {
        select.selectedIndex = 0;
    }

    updateEnhanceChance();
}

async function enhanceItem() {
    const itemId = document
        .getElementById(
            "itemSelect").value;
    if (!itemId) {
        alert("Í∞ïÌôîÌï† ÏïÑÏù¥ÌÖúÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.");
        return;
    }
    if (!window.idToken) {
        alert(
            "Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÍ∞Ä ÏïÑÎãôÎãàÎã§. Îã§Ïãú Î°úÍ∑∏Ïù∏ÌïòÏÑ∏Ïöî.");
        return;
    }
    try {
        const res = await fetch(
            "https://autorpg.onrender.com/api/enhance", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": "Bearer " +
                        window
                        .idToken
                },
                body: JSON
                    .stringify({
                        uid: userData
                            .uid,
                        id: itemId
                    }),
            });
        const result = await res
            .json();
        // ÏÑ±Í≥µ/Ïã§Ìå® Î™®Îëê ÏµúÏã† Ïú†Ï†Ä Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞
        const resUser = await fetch(
            'https://autorpg.onrender.com/api/userdata', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' +
                        window
                        .idToken,
                },
                body: JSON
                    .stringify({
                        uid: userData
                            .uid
                    }),
            });
        if (!resUser.ok)
        throw new Error(
                'Ïú†Ï†Ä Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®'
                );
        const dataUser =
            await resUser.json();
        userData = dataUser.user;
        userData.uid = userData.uid;
        userData.inventory =
            dataUser
        .inventory || [];
        updateUI();
        populateEnhanceList(userData
            .inventory);
        saveData();
    } catch (err) {
        console.error("Í∞ïÌôî Ïã§Ìå®:",
        err);
        alert("Í∞ïÌôî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
    }
}
alert("Welcome To Advanced-AutoRPG v1");
